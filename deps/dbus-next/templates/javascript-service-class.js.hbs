let dbus = require('dbus-next');
let Variant = dbus.Variant;

/*
 * Generated by dbus-next interface generator
 * Template: javascript-service-class.js.hbs
 */

let {
  Interface, property, method, signal, DBusError,
  ACCESS_READ, ACCESS_WRITE, ACCESS_READWRITE
} = dbus.interface;

{{#each interfaces}}
/**
 * Service: {{../serviceName}}
 * ObjectPath: {{../objectPath}}
 * Interface: {{$.name}}
 */
module.exports.{{className $.name}} = class {{className $.name}} extends Interface {
  constructor() {
    super('{{$.name}}');
  }

  {{#each property}}
  @property({ name: '{{$.name}}', signature: '{{$.type}}', access: {{accessConst $.access}} })
  get {{$.name}}() {
    // TODO: implement property getter for {{$.name}}
  }

  set {{$.name}}(value) {
    // TODO: implement property setter for {{$.name}}
  }

  {{/each}}

  {{#each method}}
  @method({ name: '{{$.name}}', inSignature: '{{inSignature arg}}', outSignature: '{{outSignature arg}}' })
  {{$.name}}({{#each arg}}{{#ifeq $.direction "in"}}{{$.name}}{{#unless @last}}, {{/unless}}{{/ifeq}}{{/each}}) {
    // TODO: implement the {{$.name}} method
  }

  {{/each}}
  {{#each signal}}
  @signal({ name: '{{$.name}}', signature: '{{signature arg}}' })
  {{$.name}}({{#each arg}}{{$.name}}{{#unless @last}}, {{/unless}}{{/each}}) {
    // TODO: implement the {{$.name}} signal
  }

  {{/each}}
}

{{/each}}
