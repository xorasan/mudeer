import * as DBus from 'dbus-next';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-dts.ts.hbs
 */

{{#each interfaces}}
/**
 * Service: {{../serviceName}}
 * ObjectPath: {{../objectPath}}
 * Interface: {{$.name}}
 */
export interface {{className $.name}} extends DBus.ClientInterface {

    /***** Properties *****/

    {{#each property}}
    //@property({ name: '{{$.name}}', signature: '{{$.type}}', access: {{accessConst $.access}} })
    {{#canRead $.access}}{{$.name}}(): Promise<{{tsType $.type}}>;{{/canRead}}{{#canWrite $.access}}
    {{$.name}}(value: {{tsType $.type}}): Promise<void>;{{/canWrite}}

    {{/each}}

    /***** Methods *****/

    {{#each method}}
    //@method({ name: '{{$.name}}', inSignature: '{{inSignature arg}}', outSignature: '{{outSignature arg}}' })
    {{$.name}}({{#each arg}}{{#ifeq $.direction "in"}}{{$.name}}: {{tsType $.type}}{{#unless @last}}, {{/unless}}{{/ifeq}}{{/each}}): Promise<{{outType arg}}>;

    {{/each}}

    /***** Signals *****/

    {{#each signal}}
    //@signal({ name: '{{$.name}}', signature: '{{signature arg}}' })
    on(evt: "{{$.name}}", cb: ({{#each arg}}{{$.name}}: {{tsType $.type}}{{#unless @last}}, {{/unless}}{{/each}}) => void): this;
    {{/each}}
}

{{/each}}
